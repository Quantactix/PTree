// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// PTree_cpp
Rcpp::List PTree_cpp(arma::vec R, arma::vec Y, arma::mat X, arma::mat Z, arma::mat H, arma::vec portfolio_weight, arma::vec loss_weight, arma::vec stocks, arma::vec months, arma::vec unique_months, arma::vec first_split_var, arma::vec second_split_var, size_t num_stocks, size_t num_months, size_t min_leaf_size, size_t max_depth, size_t num_iter, size_t num_cutpoints, double eta, bool equal_weight, bool no_H, bool abs_normalize, bool weighted_loss, double lambda_mean, double lambda_cov, double lambda_mean_factor, double lambda_cov_factor, bool early_stop, double stop_threshold, double lambda_ridge, double a1, double a2, arma::mat list_K, bool random_split);
RcppExport SEXP _PTree_PTree_cpp(SEXP RSEXP, SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP HSEXP, SEXP portfolio_weightSEXP, SEXP loss_weightSEXP, SEXP stocksSEXP, SEXP monthsSEXP, SEXP unique_monthsSEXP, SEXP first_split_varSEXP, SEXP second_split_varSEXP, SEXP num_stocksSEXP, SEXP num_monthsSEXP, SEXP min_leaf_sizeSEXP, SEXP max_depthSEXP, SEXP num_iterSEXP, SEXP num_cutpointsSEXP, SEXP etaSEXP, SEXP equal_weightSEXP, SEXP no_HSEXP, SEXP abs_normalizeSEXP, SEXP weighted_lossSEXP, SEXP lambda_meanSEXP, SEXP lambda_covSEXP, SEXP lambda_mean_factorSEXP, SEXP lambda_cov_factorSEXP, SEXP early_stopSEXP, SEXP stop_thresholdSEXP, SEXP lambda_ridgeSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP list_KSEXP, SEXP random_splitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type portfolio_weight(portfolio_weightSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type loss_weight(loss_weightSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type stocks(stocksSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type months(monthsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type unique_months(unique_monthsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type first_split_var(first_split_varSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type second_split_var(second_split_varSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_stocks(num_stocksSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_months(num_monthsSEXP);
    Rcpp::traits::input_parameter< size_t >::type min_leaf_size(min_leaf_sizeSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< size_t >::type num_cutpoints(num_cutpointsSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_weight(equal_weightSEXP);
    Rcpp::traits::input_parameter< bool >::type no_H(no_HSEXP);
    Rcpp::traits::input_parameter< bool >::type abs_normalize(abs_normalizeSEXP);
    Rcpp::traits::input_parameter< bool >::type weighted_loss(weighted_lossSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_mean(lambda_meanSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_cov(lambda_covSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_mean_factor(lambda_mean_factorSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_cov_factor(lambda_cov_factorSEXP);
    Rcpp::traits::input_parameter< bool >::type early_stop(early_stopSEXP);
    Rcpp::traits::input_parameter< double >::type stop_threshold(stop_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_ridge(lambda_ridgeSEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type list_K(list_KSEXP);
    Rcpp::traits::input_parameter< bool >::type random_split(random_splitSEXP);
    rcpp_result_gen = Rcpp::wrap(PTree_cpp(R, Y, X, Z, H, portfolio_weight, loss_weight, stocks, months, unique_months, first_split_var, second_split_var, num_stocks, num_months, min_leaf_size, max_depth, num_iter, num_cutpoints, eta, equal_weight, no_H, abs_normalize, weighted_loss, lambda_mean, lambda_cov, lambda_mean_factor, lambda_cov_factor, early_stop, stop_threshold, lambda_ridge, a1, a2, list_K, random_split));
    return rcpp_result_gen;
END_RCPP
}

// predict_PTree_cpp
Rcpp::List predict_PTree_cpp(arma::mat X, Rcpp::StringVector json_string, arma::vec months);
RcppExport SEXP _PTree_predict_PTree_cpp(SEXP XSEXP, SEXP json_stringSEXP, SEXP monthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type json_string(json_stringSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type months(monthsSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_PTree_cpp(X, json_string, months));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PTree_PTree_cpp", (DL_FUNC) &_PTree_PTree_cpp, 34},
    {"_PTree_predict_PTree_cpp", (DL_FUNC) &_PTree_predict_PTree_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_PTree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
